import telebot
from telebot import types
from datetime import datetime, timedelta
import time
import threading
import os
import json
import pytz
import sqlite3
import random

TOKEN = "8077781373:AAEOdodckCaZxXy-OHDaH0p_SwckKZUzR9Q"
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 5065171515
BASE_IMG_PATH = r"D:\Users\–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\PycharmProjects\Dental Art Bot\img"
DATA_FILE = "appointments_data.json"
REVIEWS_FILE = "reviews_data.json"
BONUS_FILE = "bonus_data.json"
DB_FILE = "user_states.db"

active_chats = {}
admin_active_chats = {}


def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS user_states (user_id INTEGER PRIMARY KEY, state TEXT, data TEXT)')
    conn.commit()
    conn.close()


init_db()


def get_user_state(user_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT state, data FROM user_states WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result if result else (None, None)


def set_user_state(user_id, state, data=None):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO user_states (user_id, state, data) VALUES (?, ?, ?)',
                   (user_id, state, json.dumps(data) if data else None))
    conn.commit()
    conn.close()


def clear_user_state(user_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM user_states WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()


def load_data():
    try:
        with open(DATA_FILE, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"appointments": {}, "history": {}}


def load_reviews():
    try:
        with open(REVIEWS_FILE, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"reviews": {}}


def load_bonus():
    try:
        with open(BONUS_FILE, "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"bonuses": {}}


def save_data(data):
    with open(DATA_FILE, "w", encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)


def save_reviews(reviews):
    with open(REVIEWS_FILE, "w", encoding='utf-8') as file:
        json.dump(reviews, file, indent=4, ensure_ascii=False)


def save_bonus(bonus):
    with open(BONUS_FILE, "w", encoding='utf-8') as file:
        json.dump(bonus, file, indent=4, ensure_ascii=False)


def find_user_by_phone(phone):
    for user_id, user_data in bonuses.items():
        if isinstance(user_data, dict) and "phone" in user_data and user_data["phone"] == phone:
            return user_id
    return None


data = load_data()
appointments = data.get("appointments", {})
history = data.get("history", {})
reviews_data = load_reviews()
reviews = reviews_data.get("reviews", {})
bonus_data = load_bonus()
bonuses = bonus_data.get("bonuses", {})
reminders = {}

doctors = {
    "consultation": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤–∞ –ê.–ü.", "photo": "doctor1.jpg", "specialization": "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
         "experience": "10 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ü–µ—Ç—Ä–æ–≤ –°.–ò.", "photo": "doctor2.jpg", "specialization": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
         "experience": "8 –ª–µ—Ç"}
    ],
    "children": [
        {"name": "–î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∞ –ï.–í.", "photo": "doctor1.jpg", "specialization": "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
         "experience": "12 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ê.", "photo": "doctor2.jpg", "specialization": "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
         "experience": "7 –ª–µ—Ç"}
    ],
    "clean": [
        {"name": "–î–æ–∫—Ç–æ—Ä –°–º–∏—Ä–Ω–æ–≤ –î.–û.", "photo": "doctor1.jpg", "specialization": "–ì–∏–≥–∏–µ–Ω–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞",
         "experience": "9 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –í–∞—Å–∏–ª—å–µ–≤–∞ –ò.–ù.", "photo": "doctor2.jpg", "specialization": "–ì–∏–≥–∏–µ–Ω–∞ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞",
         "experience": "6 –ª–µ—Ç"}
    ],
    "ort": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ù–∏–∫–æ–ª–∞–µ–≤ –ü.–†.", "photo": "doctor1.jpg", "specialization": "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
         "experience": "15 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –§–µ–¥–æ—Ä–æ–≤–∞ –õ.–î.", "photo": "doctor2.jpg", "specialization": "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", "experience": "11 –ª–µ—Ç"}
    ],
    "protez": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ì—Ä–æ–º–æ–≤ –ê.–°.", "photo": "doctor1.jpg", "specialization": "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
         "experience": "14 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ë–µ–ª–æ–≤–∞ –¢.–ü.", "photo": "doctor2.jpg", "specialization": "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
         "experience": "13 –ª–µ—Ç"}
    ]
}

price_list = """
<b>üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ "Denta"</b>

<b>ü¶∑ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:</b>
‚Ä¢ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</b>
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - <b>500 —Ä—É–±.</b>

<b>üë∂ –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è:</b>
‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ –º–æ–ª–æ—á–Ω–æ–≥–æ –∑—É–±–∞ - <b>–æ—Ç 2500 —Ä—É–±.</b>
‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∑—É–±–∞ - <b>–æ—Ç 3500 —Ä—É–±.</b>
‚Ä¢ –ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è —Ñ–∏—Å—Å—É—Ä - <b>1500 —Ä—É–±./–∑—É–±</b>
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–ª–æ—á–Ω–æ–≥–æ –∑—É–±–∞ - <b>1500 —Ä—É–±.</b>

<b>üßº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞:</b>
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —á–∏—Å—Ç–∫–∞ (—É–ª—å—Ç—Ä–∞–∑–≤—É–∫ + Air Flow + –ø–æ–ª–∏—Ä–æ–≤–∫–∞) - <b>4500 —Ä—É–±.</b>
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞ - <b>3500 —Ä—É–±.</b>
‚Ä¢ Air Flow - <b>2500 —Ä—É–±.</b>
‚Ä¢ –£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è —á–∏—Å—Ç–∫–∞ - <b>2000 —Ä—É–±.</b>

<b>ü¶∑ –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∫—É—Å–∞):</b>
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ä—Ç–æ–¥–æ–Ω—Ç–∞ - <b>1000 —Ä—É–±.</b>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç-—Å–∏—Å—Ç–µ–º—ã (–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π) - <b>–æ—Ç 35000 —Ä—É–±.</b>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç-—Å–∏—Å—Ç–µ–º—ã (–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π) - <b>–æ—Ç 50000 —Ä—É–±.</b>
‚Ä¢ –ö–∞–ø–ø—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑—É–±–æ–≤ - <b>–æ—Ç 40000 —Ä—É–±.</b>
‚Ä¢ –†–µ—Ç–µ–π–Ω–µ—Ä - <b>5000 —Ä—É–±.</b>

<b>ü¶∑ –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–æ–≤:</b>
‚Ä¢ –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–Ω–∫–∞ - <b>–æ—Ç 12000 —Ä—É–±.</b>
‚Ä¢ –ë–µ–∑–º–µ—Ç–∞–ª–ª–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ (E-max) - <b>–æ—Ç 20000 —Ä—É–±.</b>
‚Ä¢ –í–∏–Ω–∏—Ä –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π - <b>–æ—Ç 25000 —Ä—É–±.</b>
‚Ä¢ –°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ (–ø–æ–ª–Ω—ã–π) - <b>–æ—Ç 25000 —Ä—É–±.</b>
‚Ä¢ –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è (–ø–æ–¥ –∫–ª—é—á) - <b>–æ—Ç 45000 —Ä—É–±.</b>

<b>üéÅ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - <b>500 –±–∞–ª–ª–æ–≤</b>
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –≤–∏–∑–∏—Ç - <b>100 –±–∞–ª–ª–æ–≤</b>
‚Ä¢ –ó–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ - <b>500 –±–∞–ª–ª–æ–≤</b>
‚Ä¢ 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
"""

faq = {
    "location": {"question": "üìç –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                 "answer": "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è, –¥. 15, 3 —ç—Ç–∞–∂.\n–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ - ¬´–ó—É–±–æ–≤—Å–∫–∞—è¬ª."},
    "working_hours": {"question": "‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã",
                      "answer": "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n–ü–Ω-–ü—Ç: 9:00 - 21:00\n–°–±: 10:00 - 18:00\n–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π"},
    "emergency": {"question": "üÜò –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å",
                  "answer": "–í —Å–ª—É—á–∞–µ –æ—Å—Ç—Ä–æ–π –±–æ–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67 - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–∏–Ω—è—Ç—å –≤–∞—Å –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏."},
    "clean_price": {"question": "üßº –°—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å—Ç–∫–∏",
                    "answer": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞ - 3500 —Ä—É–±.\nAir Flow - 2500 —Ä—É–±.\n–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —á–∏—Å—Ç–∫–∞ - 4500 —Ä—É–±."},
    "children": {"question": "üë∂ –î–µ—Ç—Å–∫–∏–π –ø—Ä–∏–µ–º",
                 "answer": "–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Ä–µ–±–µ–Ω–∫–∞ –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ª—É—á—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 1 –≥–æ–¥–∞ –∏–ª–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö –∑—É–±–æ–≤."},
    "payment": {"question": "üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
                "answer": "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º:\n- –ù–∞–ª–∏—á–Ω—ã–µ\n- –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n- –ë–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n- –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã"},
    "bonus": {"question": "üéÅ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
              "answer": "–ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - 500 –±–∞–ª–ª–æ–≤\n–ó–∞ –∫–∞–∂–¥—ã–π –≤–∏–∑–∏—Ç - 100 –±–∞–ª–ª–æ–≤\n–ó–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ - 500 –±–∞–ª–ª–æ–≤\n1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ"}
}


@bot.message_handler(commands=["start"])
def start_message(message):
    user_id = str(message.chat.id)
    if user_id not in bonuses:
        consultation_doctor = random.choice(doctors["consultation"])

        welcome_text = f"""
ü¶∑ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É "Denta"!</b>

üéâ <b>–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –¥–æ–∫—Ç–æ—Ä—É {consultation_doctor['name']}</b>

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:
"""
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="register_with_phone"),
            types.InlineKeyboardButton("‚úâÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –Ω–æ–º–µ—Ä–∞", callback_data="register_without_phone")
        )
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=markup)
    else:
        balance = bonuses[user_id]["balance"] if isinstance(bonuses[user_id], dict) else bonuses[user_id]
        welcome_text = f"""
ü¶∑ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É "Denta"!</b>

–í–∞—à —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤
"""
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üÜì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation"))
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=markup)
        show_main_menu(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ["register_with_phone", "register_without_phone"])
def handle_registration_choice(call):
    user_id = str(call.message.chat.id)
    if call.data == "register_with_phone":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
        bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                         reply_markup=markup)
    else:
        bonuses[user_id] = {"balance": 500}
        save_bonus({"bonuses": bonuses})
        bot.send_message(
            call.message.chat.id,
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É—Å–ª—É–≥.",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(call.message.chat.id)


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        user_id = str(message.chat.id)
        phone = message.contact.phone_number

        if user_id not in bonuses:
            bonuses[user_id] = {"balance": 500, "phone": phone}
        else:
            if isinstance(bonuses[user_id], int):
                bonuses[user_id] = {"balance": bonuses[user_id] + 500, "phone": phone}
            else:
                bonuses[user_id]["balance"] = bonuses[user_id].get("balance", 0) + 500
                bonuses[user_id]["phone"] = phone

        save_bonus({"bonuses": bonuses})
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –±–æ–Ω—É—Å–æ–≤.\n\n"
            "1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É—Å–ª—É–≥.",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(message.chat.id)


def show_main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
        types.KeyboardButton("üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"),
        types.KeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π"),
        types.KeyboardButton("üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã"),
        types.KeyboardButton("‚ùì FAQ"),
        types.KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π")
    ]
    keyboard.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@bot.message_handler(commands=['admin'], func=lambda message: message.chat.id == ADMIN_ID)
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
    bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID and message.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
def show_active_chats(message):
    if not active_chats:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏")
        return
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:\n"
    for user_id, chat_data in active_chats.items():
        text += f"\nüë§ ID: {user_id} | üìû –¢–µ–ª–µ—Ñ–æ–Ω: {chat_data['phone']}"
    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda message: message.text == "üí¨ –ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π")
def handle_clinic_chat(message):
    user_id = message.chat.id
    if user_id in active_chats:
        bot.send_message(user_id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if str(user_id) not in bonuses:
        bonuses[str(user_id)] = {"balance": 0}
    elif isinstance(bonuses[str(user_id)], int):
        bonuses[str(user_id)] = {"balance": bonuses[str(user_id)]}

    phone = bonuses[str(user_id)].get("phone")

    if not phone:
        msg = bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(msg, process_phone_for_chat)
    else:
        start_chat_with_admin(user_id, phone)


def process_phone_for_chat(message):
    user_id = message.chat.id
    phone = message.text.strip()

    if not phone.isdigit() or len(phone) < 10:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if str(user_id) not in bonuses:
        bonuses[str(user_id)] = {"balance": 0, "phone": phone}
    else:
        if isinstance(bonuses[str(user_id)], int):
            bonuses[str(user_id)] = {"balance": bonuses[str(user_id)], "phone": phone}
        else:
            bonuses[str(user_id)]["phone"] = phone

    save_bonus({"bonuses": bonuses})
    start_chat_with_admin(user_id, phone)


def start_chat_with_admin(user_id, phone):
    active_chats[user_id] = {"admin_id": ADMIN_ID, "phone": phone}
    admin_active_chats[ADMIN_ID] = user_id

    if str(user_id) not in bonuses:
        bonuses[str(user_id)] = {"balance": 0, "phone": phone}
    elif isinstance(bonuses[str(user_id)], int):
        bonuses[str(user_id)] = {"balance": bonuses[str(user_id)], "phone": phone}

    bot.send_message(user_id,
                     "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                     "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /endchat",
                     reply_markup=types.ReplyKeyboardRemove())

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))

    try:
        bot.send_message(ADMIN_ID,
                         f"‚úâÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                         f"ID: {user_id}\n"
                         f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ:",
                         reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        if user_id in active_chats:
            del active_chats[user_id]
        if ADMIN_ID in admin_active_chats:
            del admin_active_chats[ADMIN_ID]


@bot.message_handler(commands=['endchat'])
def end_chat(message):
    user_id = message.chat.id
    if user_id in active_chats:
        admin_id = active_chats[user_id]["admin_id"]

        bot.send_message(user_id, "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True))
        show_main_menu(user_id)

        if admin_id in admin_active_chats:
            bot.send_message(admin_id, f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
            del admin_active_chats[admin_id]

        del active_chats[user_id]
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@bot.message_handler(func=lambda message: message.chat.id in active_chats)
def forward_user_message(message):
    user_id = message.chat.id
    admin_id = active_chats[user_id]["admin_id"]
    phone = active_chats[user_id]["phone"]

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))

    try:
        bot.send_message(admin_id,
                         f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone} (ID: {user_id}):\n\n{message.text}",
                         reply_markup=markup)
        bot.send_message(user_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_admin_reply(call):
    admin_id = call.message.chat.id
    user_id = int(call.data.split('_')[1])

    if admin_id not in admin_active_chats:
        admin_active_chats[admin_id] = user_id

    msg = bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    bot.register_next_step_handler(msg, process_admin_reply, user_id)


def process_admin_reply(message, user_id):
    admin_id = message.chat.id
    reply_text = message.text

    try:
        bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
        bot.send_message(admin_id, "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        if user_id not in active_chats:
            active_chats[user_id] = {"admin_id": admin_id,
                                     "phone": bonuses.get(str(user_id), {}).get("phone", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")}
        admin_active_chats[admin_id] = user_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.send_message(admin_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


def show_my_appointments(chat_id):
    user_id = str(chat_id)
    if user_id in appointments and appointments[user_id]:
        for i, appointment in enumerate(appointments[user_id], 1):
            app_time = datetime.fromtimestamp(appointment['timestamp'], tz=pytz.timezone('Europe/Moscow'))
            formatted_date = app_time.strftime("%d.%m.%Y")

            is_in_history = any(
                hist['date'] == appointment['date'] and hist['time'] == appointment['time']
                for hist in history.get(user_id, [])
            )

            markup = types.InlineKeyboardMarkup()
            if not is_in_history:
                markup.add(
                    types.InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{i}", callback_data=f"cancel_{chat_id}_{i - 1}"),
                    types.InlineKeyboardButton(f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å #{i}",
                                               callback_data=f"reschedule_{chat_id}_{i - 1}")
                )

            bot.send_message(
                chat_id,
                f"""<b>–ó–∞–ø–∏—Å—å #{i}:</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if not is_in_history else 'üìù –ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
<b>–£—Å–ª—É–≥–∞:</b> {appointment['service']}
<b>–í—Ä–∞—á:</b> {appointment['doctor']}
<b>–î–∞—Ç–∞:</b> {formatted_date}
<b>–í—Ä–µ–º—è:</b> {appointment['time']}
<b>–ë–æ–Ω—É—Å—ã –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é:</b> {'+100 –±–∞–ª–ª–æ–≤' if not is_in_history else '—É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã'}""",
                parse_mode='HTML',
                reply_markup=markup
            )
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")


def show_history(chat_id):
    user_history = history.get(str(chat_id), [])
    if not user_history:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π.")
        return
    history_text = "üìÖ <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:</b>\n\n"
    for i, visit in enumerate(user_history, 1):
        visit_date = datetime.strptime(visit['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
        history_text += f"<b>{i}. –£—Å–ª—É–≥–∞:</b> {visit['service']}\n"
        history_text += f"<b>–í—Ä–∞—á:</b> {visit['doctor']}\n"
        history_text += f"<b>–î–∞—Ç–∞:</b> {visit_date} –≤ {visit.get('time', '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        if 'review' in visit:
            history_text += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {'‚≠ê' * visit['review']['rating']}\n"
            if visit['review']['comment']:
                history_text += f"<b>–û—Ç–∑—ã–≤:</b> {visit['review']['comment']}\n"
        history_text += "\n"
    bot.send_message(chat_id, history_text, parse_mode='HTML')


def show_faq_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(item["question"]) for item in faq.values()]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    keyboard.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)


def handle_faq(message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        show_main_menu(message.chat.id)
        return
    for item in faq.values():
        if message.text == item["question"]:
            bot.send_message(message.chat.id, item["answer"])
            return
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é.")


def handle_appointment(message):
    user_id = str(message.chat.id)
    if user_id in appointments and len(appointments[user_id]) >= 2:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö.")
        return
    set_user_state(message.chat.id, "choosing_service")
    inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("ü¶∑ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="consultation"),
        types.InlineKeyboardButton("üë∂ –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", callback_data="children"),
        types.InlineKeyboardButton("üßº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", callback_data="clean"),
        types.InlineKeyboardButton("ü¶∑ –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∫—É—Å–∞)", callback_data="ort"),
        types.InlineKeyboardButton("ü¶∑ –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–æ–≤", callback_data="protez")
    ]
    inline_keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=inline_keyboard)


@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    state, _ = get_user_state(message.chat.id)
    if state == "chat_with_clinic":
        clear_user_state(message.chat.id)
        bot.send_message(
            message.chat.id,
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å –∫–ª–∏–Ω–∏–∫–æ–π.",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
        )
        show_main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("cancel_"):
        parts = call.data.split("_")
        user_id = parts[1]
        appointment_index = int(parts[2])
        if user_id in appointments and len(appointments[user_id]) > appointment_index:
            del appointments[user_id][appointment_index]
            if not appointments[user_id]:
                del appointments[user_id]
            save_data({"appointments": appointments, "history": history})
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            bot.send_message(user_id, "‚ùå –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif call.data.startswith("reschedule_"):
        parts = call.data.split("_")
        user_id = parts[1]
        appointment_index = int(parts[2])
        if user_id in appointments and len(appointments[user_id]) > appointment_index:
            set_user_state(user_id, "rescheduling", {"appointment_index": appointment_index})
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            show_doctors_for_service(user_id, appointments[user_id][appointment_index]['service'])
        else:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif call.data in ["consultation", "children", "clean", "ort", "protez"]:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
        doctor = random.choice(doctors[call.data])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
        photo_path = os.path.join(BASE_IMG_PATH, doctor["photo"])
        try:
            with open(photo_path, 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo,
                               caption=f"<b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä–∞—á:</b>\n{doctor['name']}\n"
                                       f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {doctor['specialization']}\n"
                                       f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {doctor['experience']}",
                               parse_mode='HTML')
        except FileNotFoundError:
            bot.send_message(call.message.chat.id,
                             f"<b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä–∞—á:</b>\n{doctor['name']}\n"
                             f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {doctor['specialization']}\n"
                             f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {doctor['experience']}",
                             parse_mode='HTML')

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        set_user_state(call.message.chat.id, f"choosing_date_{call.data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        available_dates = []
        today = datetime.now(pytz.timezone('Europe/Moscow'))
        for i in range(1, 8):
            date = today + timedelta(days=i)
            if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏–µ –¥–Ω–∏
                available_dates.append(date.strftime("%Y-%m-%d"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
        inline_keyboard = types.InlineKeyboardMarkup()
        for date in available_dates:
            formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            inline_keyboard.add(
                types.InlineKeyboardButton(formatted_date, callback_data=f"date_{date}_{call.data}")
            )
        bot.send_message(call.message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=inline_keyboard)

    elif call.data.startswith("date_"):
        parts = call.data.split("_")
        date = parts[1]
        service = parts[2]
        user_id = call.message.chat.id

        set_user_state(user_id, f"choosing_time_{date}_{service}")

        available_times = ["10:00", "12:00", "14:00", "16:00"]
        inline_keyboard = types.InlineKeyboardMarkup()
        for time in available_times:
            inline_keyboard.add(
                types.InlineKeyboardButton(time, callback_data=f"time_{time}_{date}_{service}")
            )
        bot.send_message(user_id, "üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=inline_keyboard)

    elif call.data.startswith("time_"):
        parts = call.data.split("_")
        time = parts[1]
        date = parts[2]
        service = parts[3]
        user_id = call.message.chat.id

        # –°–Ω–æ–≤–∞ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞—á–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ—Ü–µ—Å—Å)
        doctor = random.choice(doctors[service])

        appointment = {
            "service": service,
            "doctor": doctor["name"],
            "date": date,
            "time": time,
            "timestamp": datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M").replace(
                tzinfo=pytz.timezone('Europe/Moscow')).timestamp()
        }

        if str(user_id) not in appointments:
            appointments[str(user_id)] = []
        appointments[str(user_id)].append(appointment)

        schedule_reminders(user_id, datetime.fromtimestamp(appointment["timestamp"], tz=pytz.timezone('Europe/Moscow')))
        save_data({"appointments": appointments, "history": history})

        if str(user_id) not in bonuses:
            bonuses[str(user_id)] = {"balance": 0}
            save_bonus({"bonuses": bonuses})

        formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        bot.send_message(user_id,
                         f"""
‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!</b>

<b>–£—Å–ª—É–≥–∞:</b> {service}
<b>–í—Ä–∞—á:</b> {doctor['name']}
<b>–î–∞—Ç–∞:</b> {formatted_date}
<b>–í—Ä–µ–º—è:</b> {time}

–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤–∏–∑–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.
                         """, parse_mode='HTML')
        clear_user_state(user_id)
        show_main_menu(user_id)

    elif call.data.startswith("review_"):
        parts = call.data.split("_")
        action = parts[1]
        user_id = int(parts[2])
        if action == "request":
            keyboard = types.InlineKeyboardMarkup()
            for i in range(1, 6):
                keyboard.add(types.InlineKeyboardButton(f"{i} ‚≠ê", callback_data=f"review_rate_{i}_{user_id}"))
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:", reply_markup=keyboard)
        elif action.startswith("rate_"):
            rating = int(action.split("_")[1])
            set_user_state(user_id, "waiting_review_comment", {"rating": rating})
            bot.send_message(user_id,
                             f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} –∑–≤–µ–∑–¥! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")



@bot.message_handler(commands=['skip'])
def handle_skip_command(message):
    state, data = get_user_state(message.chat.id)
    if state == "waiting_review_comment":
        data = json.loads(data) if data else {}
        rating = data.get("rating", 0)
        handle_review_comment_with_rating(message.chat.id, rating, "")
        clear_user_state(message.chat.id)

def handle_review_comment_with_rating(user_id, rating, comment):
    user_history = history.get(str(user_id), [])
    if user_history:
        last_visit = user_history[-1]
        last_visit['review'] = {
            "rating": rating,
            "comment": comment,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        if str(user_id) not in reviews:
            reviews[str(user_id)] = []
        reviews[str(user_id)].append({
            "service": last_visit['service'],
            "doctor": last_visit['doctor'],
            "rating": rating,
            "comment": comment,
            "date": last_visit['date']
        })
        save_data({"appointments": appointments, "history": history})
        save_reviews({"reviews": reviews})
        bot.send_message(user_id, "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    else:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏.")
    show_main_menu(user_id)

@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == "waiting_review_comment")
def handle_review_comment(message):
    state, data = get_user_state(message.chat.id)
    data = json.loads(data) if data else {}
    rating = data.get("rating", 0)
    comment = message.text
    handle_review_comment_with_rating(message.chat.id, rating, comment)
    clear_user_state(message.chat.id)

def add_to_history(user_id, appointment):
    user_id_str = str(user_id)
    if user_id_str not in history:
        history[user_id_str] = []
    appointment_copy = appointment.copy()
    if 'timestamp' in appointment_copy:
        del appointment_copy['timestamp']
    history[user_id_str].append(appointment_copy)
    save_data({"appointments": appointments, "history": history})
    if str(user_id) in bonuses:
        bonuses[str(user_id)]["balance"] += 100
    else:
        bonuses[str(user_id)] = {"balance": 100}
    save_bonus({"bonuses": bonuses})

def schedule_reminders(user_id, appointment_time):
    reminder_24h = appointment_time - timedelta(hours=24)
    reminders[(user_id, "24h")] = reminder_24h
    reminder_1h = appointment_time - timedelta(hours=1)
    reminders[(user_id, "1h")] = reminder_1h
    review_time = appointment_time + timedelta(hours=2)
    reminders[(user_id, "review")] = review_time

def check_reminders():
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        to_remove = []
        for (user_id, reminder_type), reminder_time in reminders.items():
            if now >= reminder_time:
                appointment_list = appointments.get(str(user_id), [])
                if appointment_list:
                    for appointment in appointment_list:
                        app_time = datetime.fromtimestamp(appointment['timestamp'], tz=pytz.timezone('Europe/Moscow'))
                        if reminder_type == "24h" and (app_time - now).total_seconds() < 86400 + 60 and (
                                app_time - now).total_seconds() > 0:
                            bot.send_message(user_id,
                                             f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>

–ó–∞–≤—Ç—Ä–∞ –≤ <b>{appointment['time']}</b> —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É.

<b>–£—Å–ª—É–≥–∞:</b> {appointment['service']}
<b>–í—Ä–∞—á:</b> {appointment['doctor']}
                                             """, parse_mode='HTML')
                        elif reminder_type == "1h" and (app_time - now).total_seconds() < 3600 + 60 and (
                                app_time - now).total_seconds() > 0:
                            bot.send_message(user_id,
                                             f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>

–ß–µ—Ä–µ–∑ —á–∞—Å –≤ <b>{appointment['time']}</b> —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É.

<b>–£—Å–ª—É–≥–∞:</b> {appointment['service']}
<b>–í—Ä–∞—á:</b> {appointment['doctor']}
                                             """, parse_mode='HTML')
                if reminder_type == "review":
                    user_history = history.get(str(user_id), [])
                    last_visit = user_history[-1] if user_history else None
                    if last_visit and 'review' not in last_visit:
                        inline_keyboard = types.InlineKeyboardMarkup()
                        inline_keyboard.add(
                            types.InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_request_{user_id}"))
                        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏:",
                                         reply_markup=inline_keyboard)
                to_remove.append((user_id, reminder_type))
        for key in to_remove:
            reminders.pop(key, None)
        time.sleep(60)

def show_doctors_for_service(chat_id, service):
    inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
    for i, doctor in enumerate(doctors[service]):
        photo_path = os.path.join(BASE_IMG_PATH, doctor["photo"])
        try:
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo,
                               caption=f"<b>{doctor['name']}</b>\n"
                                       f"{doctor['specialization']}\n"
                                       f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {doctor['experience']}",
                               parse_mode='HTML')
        except FileNotFoundError:
            bot.send_message(chat_id, f"–§–æ—Ç–æ –≤—Ä–∞—á–∞ {doctor['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        btn = types.InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {doctor['name']}", callback_data=f"doctor_{i}_{service}")
        inline_keyboard.add(btn)
    bot.send_message(chat_id, "üë®‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=inline_keyboard)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    state, _ = get_user_state(message.chat.id)
    if message.text.startswith('/'):
        return
    if state == "chat_with_clinic":
        menu_buttons = [
            "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º", "üí¨ –ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π",
            "üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã", "‚ùì FAQ", "üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π"
        ]
        if message.text not in menu_buttons:
            forward_user_message(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel",
                reply_markup=types.ReplyKeyboardRemove()
            )
        return
    if message.text == "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º":
        handle_appointment(message)
    elif message.text == "üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã":
        bot.send_message(message.chat.id, price_list, parse_mode='HTML')
    elif message.text == "üí¨ –ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π":
        if message.chat.id in active_chats:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            handle_clinic_chat(message)
    elif message.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        show_my_appointments(message.chat.id)
    elif message.text == "‚ùì FAQ":
        show_faq_menu(message.chat.id)
    elif message.text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π":
        show_history(message.chat.id)
    else:
        handle_faq(message)

reminder_thread = threading.Thread(target=check_reminders)
reminder_thread.daemon = True
reminder_thread.start()

bot.polling()