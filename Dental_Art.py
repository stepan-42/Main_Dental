import telebot
from telebot import types
from datetime import datetime, timedelta
import time
import threading
import os

TOKEN = "8077781373:AAEOdodckCaZxXy-OHDaH0p_SwckKZUzR9Q"
bot = telebot.TeleBot(TOKEN)

BASE_IMG_PATH = "/home/sdasdasdasdas/Dental_Bot/img/"

appointments = {}
reminders = {}
user_states = {}

doctors = {
    "consultation": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤–∞ –ê.–ü.", "photo": "doctor1.jpg",
         "specialization": "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "experience": "10 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ü–µ—Ç—Ä–æ–≤ –°.–ò.", "photo": "doctor2.jpg",
         "specialization": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "experience": "8 –ª–µ—Ç"}
    ],
    "children": [
        {"name": "–î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∞ –ï.–í.", "photo": "doctor3.jpg",
         "specialization": "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "experience": "12 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ê.", "photo": "doctor4.jpg",
         "specialization": "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "experience": "7 –ª–µ—Ç"}
    ],
    "clean": [
        {"name": "–î–æ–∫—Ç–æ—Ä –°–º–∏—Ä–Ω–æ–≤ –î.–û.", "photo": "doctor5.jpg",
         "specialization": "–ì–∏–≥–∏–µ–Ω–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞", "experience": "9 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –í–∞—Å–∏–ª—å–µ–≤–∞ –ò.–ù.", "photo": "doctor6.jpg",
         "specialization": "–ì–∏–≥–∏–µ–Ω–∞ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞", "experience": "6 –ª–µ—Ç"}
    ],
    "ort": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ù–∏–∫–æ–ª–∞–µ–≤ –ü.–†.", "photo": "doctor7.jpg",
         "specialization": "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", "experience": "15 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –§–µ–¥–æ—Ä–æ–≤–∞ –õ.–î.", "photo": "doctor8.jpg",
         "specialization": "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", "experience": "11 –ª–µ—Ç"}
    ],
    "protez": [
        {"name": "–î–æ–∫—Ç–æ—Ä –ì—Ä–æ–º–æ–≤ –ê.–°.", "photo": "doctor9.jpg",
         "specialization": "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "experience": "14 –ª–µ—Ç"},
        {"name": "–î–æ–∫—Ç–æ—Ä –ë–µ–ª–æ–≤–∞ –¢.–ü.", "photo": "doctor10.jpg",
         "specialization": "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "experience": "13 –ª–µ—Ç"}
    ]
}

price_list = """
üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ "Denta":

ü¶∑ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:
‚Ä¢ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 500 —Ä—É–±.

üë∂ –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è:
‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ –º–æ–ª–æ—á–Ω–æ–≥–æ –∑—É–±–∞ - –æ—Ç 2500 —Ä—É–±.
‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∑—É–±–∞ - –æ—Ç 3500 —Ä—É–±.
‚Ä¢ –ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è —Ñ–∏—Å—Å—É—Ä - 1500 —Ä—É–±./–∑—É–±
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–ª–æ—á–Ω–æ–≥–æ –∑—É–±–∞ - 1500 —Ä—É–±.

üßº –ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤:
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞ - 3500 —Ä—É–±.
‚Ä¢ Air Flow - 2500 —Ä—É–±.
‚Ä¢ –£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è —á–∏—Å—Ç–∫–∞ - 2000 —Ä—É–±.
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —á–∏—Å—Ç–∫–∞ (—É–ª—å—Ç—Ä–∞–∑–≤—É–∫ + Air Flow + –ø–æ–ª–∏—Ä–æ–≤–∫–∞) - 4500 —Ä—É–±.

ü¶∑ –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ä—Ç–æ–¥–æ–Ω—Ç–∞ - 1000 —Ä—É–±.
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç-—Å–∏—Å—Ç–µ–º—ã (–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π) - –æ—Ç 35000 —Ä—É–±.
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç-—Å–∏—Å—Ç–µ–º—ã (–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π) - –æ—Ç 50000 —Ä—É–±.
‚Ä¢ –ö–∞–ø–ø—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑—É–±–æ–≤ - –æ—Ç 40000 —Ä—É–±.
‚Ä¢ –†–µ—Ç–µ–π–Ω–µ—Ä - 5000 —Ä—É–±.

ü¶∑ –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:
‚Ä¢ –ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä–æ–Ω–∫–∞ - –æ—Ç 12000 —Ä—É–±.
‚Ä¢ –ë–µ–∑–º–µ—Ç–∞–ª–ª–æ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ (E-max) - –æ—Ç 20000 —Ä—É–±.
‚Ä¢ –í–∏–Ω–∏—Ä –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π - –æ—Ç 25000 —Ä—É–±.
‚Ä¢ –°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ (–ø–æ–ª–Ω—ã–π) - –æ—Ç 25000 —Ä—É–±.
‚Ä¢ –°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ (—á–∞—Å—Ç–∏—á–Ω—ã–π) - –æ—Ç 18000 —Ä—É–±.
‚Ä¢ –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è (–ø–æ–¥ –∫–ª—é—á) - –æ—Ç 45000 —Ä—É–±.

* –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, —Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–µ–º–µ —É –≤—Ä–∞—á–∞.
"""


@bot.message_handler(commands=["start"])
def start_message(message):
    welcome_text = "ü¶∑ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –∫–ª–∏–Ω–∏–∫–∏ 'Denta'."
    bot.send_message(message.chat.id, welcome_text)
    show_main_menu(message.chat.id)


def show_main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but1 = types.KeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º")
    but2 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏")
    but3 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã")
    but4 = types.KeyboardButton("–ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π")
    keyboard.add(but1, but2, but3, but4)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text == "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º":
        handle_appointment(message)
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏":
        handle_cancel_reschedule(message)
    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ü–µ–Ω—ã":
        bot.send_message(message.chat.id, price_list)
    elif message.text == "–ß–∞—Ç —Å –∫–ª–∏–Ω–∏–∫–æ–π":
        handle_clinic_chat(message)


def handle_appointment(message):
    user_states[message.chat.id] = "choosing_service"
    inline_keyboard = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="consultation")
    but2 = types.InlineKeyboardButton("–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", callback_data="children")
    but3 = types.InlineKeyboardButton("–ß–∏—Å—Ç–∫–∞", callback_data="clean")
    but4 = types.InlineKeyboardButton("–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", callback_data="ort")
    but5 = types.InlineKeyboardButton("–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="protez")
    inline_keyboard.add(but1, but2, but3, but4, but5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=inline_keyboard)


def handle_cancel_reschedule(message):
    if message.chat.id in appointments:
        appointment = appointments[message.chat.id]
        inline_keyboard = types.InlineKeyboardMarkup()
        but1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{message.chat.id}")
        but2 = types.InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å", callback_data=f"reschedule_{message.chat.id}")
        inline_keyboard.add(but1, but2)
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:\n–£—Å–ª—É–≥–∞: {appointment['service']}\n–í—Ä–∞—á: {appointment['doctor']}\n–î–∞—Ç–∞: {appointment['date']}\n–í—Ä–µ–º—è: {appointment['time']}",
                         reply_markup=inline_keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")


def handle_clinic_chat(message):
    user_states[message.chat.id] = "chat_with_clinic"
    bot.send_message(message.chat.id,
                     "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("cancel_"):
        user_id = int(call.data.split("_")[1])
        if user_id in appointments:
            del appointments[user_id]
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            bot.send_message(user_id, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif call.data.startswith("reschedule_"):
        user_id = int(call.data.split("_")[1])
        user_states[user_id] = "rescheduling"
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        show_doctors_for_service(user_id, appointments[user_id]['service'])

    elif call.data in ["consultation", "children", "clean", "ort", "protez"]:
        user_states[call.message.chat.id] = f"choosing_doctor_{call.data}"
        show_doctors_for_service(call.message.chat.id, call.data)

    elif call.data.startswith("doctor_"):
        parts = call.data.split("_")
        service = parts[2]
        doctor_index = int(parts[1])
        user_id = call.message.chat.id
        user_states[user_id] = f"choosing_date_{service}_{doctor_index}"

        available_dates = ["2025-04-01", "2025-04-02", "2025-04-03"]
        inline_keyboard = types.InlineKeyboardMarkup()
        for date in available_dates:
            inline_keyboard.add(types.InlineKeyboardButton(date, callback_data=f"date_{date}_{service}_{doctor_index}"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=inline_keyboard)

    elif call.data.startswith("date_"):
        parts = call.data.split("_")
        date = parts[1]
        service = parts[2]
        doctor_index = int(parts[3])
        user_id = call.message.chat.id
        user_states[user_id] = f"choosing_time_{date}_{service}_{doctor_index}"

        available_times = ["10:00", "12:00", "14:00", "16:00"]
        inline_keyboard = types.InlineKeyboardMarkup()
        for time in available_times:
            inline_keyboard.add(
                types.InlineKeyboardButton(time, callback_data=f"time_{time}_{date}_{service}_{doctor_index}"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=inline_keyboard)

    elif call.data.startswith("time_"):
        parts = call.data.split("_")
        time = parts[1]
        date = parts[2]
        service = parts[3]
        doctor_index = int(parts[4])
        user_id = call.message.chat.id

        doctor = doctors[service][doctor_index]
        appointment = {
            "service": service,
            "doctor": doctor["name"],
            "date": date,
            "time": time,
            "timestamp": datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        }

        appointments[user_id] = appointment
        schedule_reminders(user_id, appointment["timestamp"])

        bot.send_message(user_id,
                         f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n–£—Å–ª—É–≥–∞: {service}\n–í—Ä–∞—á: {doctor['name']}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n\n–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤–∏–∑–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.")
        show_main_menu(user_id)


def show_doctors_for_service(chat_id, service):
    inline_keyboard = types.InlineKeyboardMarkup()
    for i, doctor in enumerate(doctors[service]):
        photo_path = os.path.join(BASE_IMG_PATH, doctor["photo"])
        try:
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo,
                               caption=f"{doctor['name']}\n{doctor['specialization']}\n–û–ø—ã—Ç: {doctor['experience']}")
        except FileNotFoundError:
            bot.send_message(chat_id, f"–§–æ—Ç–æ –≤—Ä–∞—á–∞ {doctor['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        btn = types.InlineKeyboardButton(
            f"–í—ã–±—Ä–∞—Ç—å {doctor['name']}",
            callback_data=f"doctor_{i}_{service}")
        inline_keyboard.add(btn)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=inline_keyboard)


def schedule_reminders(user_id, appointment_time):
    reminder_24h = appointment_time - timedelta(hours=24)
    reminders[(user_id, "24h")] = reminder_24h
    reminder_1h = appointment_time - timedelta(hours=1)
    reminders[(user_id, "1h")] = reminder_1h


def check_reminders():
    while True:
        now = datetime.now()
        to_remove = []

        for (user_id, reminder_type), reminder_time in reminders.items():
            if now >= reminder_time:
                appointment = appointments.get(user_id)
                if appointment:
                    if reminder_type == "24h":
                        bot.send_message(user_id,
                                         f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ {appointment['time']} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É.\n–£—Å–ª—É–≥–∞: {appointment['service']}\n–í—Ä–∞—á: {appointment['doctor']}")
                    elif reminder_type == "1h":
                        bot.send_message(user_id,
                                         f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ —á–∞—Å –≤ {appointment['time']} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É.\n–£—Å–ª—É–≥–∞: {appointment['service']}\n–í—Ä–∞—á: {appointment['doctor']}")
                to_remove.append((user_id, reminder_type))

        for key in to_remove:
            reminders.pop(key, None)

        time.sleep(60)


reminder_thread = threading.Thread(target=check_reminders)
reminder_thread.daemon = True
reminder_thread.start()

bot.polling()